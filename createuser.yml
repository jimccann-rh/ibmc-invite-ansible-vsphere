- block:

    - name: Run ibmcloud find user
      ansible.builtin.shell: "ibmcloud account user-status {{ item.value.email }}"
      register: ibmcli_output

  rescue:

    - name: Run ibmcloud cli invite user
      ansible.builtin.shell: "ibmcloud account user-invite {{ item.value.email }}"
      register: ibmcli_output
      failed_when: ( ibmcli_output.rc not in [ 0, 1 ] )
    
    - name: Output of ibmcli command
      ansible.builtin.debug:
        msg: '{{ item }}'
      loop:
        - '{{ ibmcli_output }}'
      tags: never

    - pause:
        seconds: 10

    - name: Get ibmcloud cli add user id
      ansible.builtin.shell: 'ibmcloud sl call-api Account getUsers --mask "id,email" > data.json'
      register: ibmcli_output_id
      failed_when: ( ibmcli_output_id.rc not in [ 0, 1 ] )
    
    - ansible.builtin.set_fact:
        emailuser: "{{ item.value.email }}"
        user_id: ""
    - ansible.builtin.debug:
        msg: "{{ emailuser }}"
    
    - name: Find user with email
      set_fact:
        user_id: "{{ loopuser.id }}"
      when: loopuser.email == emailuser
      loop: "{{ jsonVar }}"
      loop_control:
        loop_var: loopuser
    
    - name: Print the ID
      ansible.builtin.debug:
        msg: "User ID: {{ user_id }}"
    
    - name: Run ibmcloud cli add user to ssl vpn
      ansible.builtin.shell: "ibmcloud sl user vpn-enable {{ user_id }}"
      register: ibmcli_output
      failed_when: ( ibmcli_output.rc not in [ 0, 1 ] )

    - name: Output of ibmcli command
      ansible.builtin.debug:
        msg: '{{ item }}'
      loop:
        - '{{ ibmcli_output }}'
      tags: never


- name: Run govc group find
  ansible.builtin.shell: "govc sso.group.ls -search {{ item.value.role  }}"
  register: grouplookup

- name: Run govc group create
  ansible.builtin.shell: "govc sso.group.create {{ item.value.role  }}"
  when: grouplookup == ""

- block:

    - name: Run govc user find
      ansible.builtin.shell: "govc sso.user.id {{ item.value.kerberos }}"

  rescue:

    - name: Set password and domain
      ansible.builtin.set_fact: 
         my_pass: "{{ pwd_alias }}"
         domain: "{{ vcenter | urlsplit('hostname') }}"

    - name: Set subdomain
      ansible.builtin.set_fact: 
         subdomain: "{{ domain.split('.')[1:] | join('.') }}"
         #subdomain: "{{ domain | regex_replace('^.+\\.', '') }}"
         #subdomain: "{{ domain.split('.') | list | getitem(1) }}"
         #domain: "{{ 'vcenter' | regex_search('http://+)', '\\1') }}"
 
    - name: Show user creds
      ansible.builtin.debug:
        msg: "vCenter to login to * {{ vcenter }} * login in with this user ** {{ item.value.kerberos }}@{{ subdomain }} ** this is the password ***     {{ my_pass }}     ***"

#    - pause:

    - name: Run govc user create
      ansible.builtin.shell: "govc sso.user.create -f {{ item.value.first  }} -l {{ item.value.last }} -m {{ item.value.email }} -p '{{ my_pass }}' {{ item.value.kerberos }}"
    
    - name: Run govc update group
      ansible.builtin.shell: "govc sso.group.update -a {{ item.value.kerberos }} {{ item.value.role  }}"


#      govc_runner("govc sso.group.create " + newGroup)
#      govc_runner("govc sso.user.create -f '" + newFirst + "' -l '" + newLast + "' -m '" + newUserEmail + "' -p '" + newUserPassword + "' '" + newUserUsername + "'")
#      govc_runner("govc sso.group.update -a " + newUserUsername + " " + newGroup)



